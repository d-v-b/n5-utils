#!/usr/bin/python

import os
import sys
from pathlib import Path
from psutil import virtual_memory
from subprocess import call 
import platform
import stat

VERSION="0.0.5-SNAPSHOT"
cpfile = 'cp.txt'
cmds = ('View', 'Copy', 'Equals')

def mvn():  
  # copy the environment so we can restore it after adding a variable
  env_ = dict(os.environ)
  try:
    # temporary workaround for openjdk plus surefire bug
    os.environ['_JAVA_OPTIONS'] = "-Djdk.net.URLClassPath.disableClassPathURLCheck=true"    
    call(["mvn", "clean", "install"])
  finally:
    os.environ.clear()
    os.environ.update(env_)  
  call(["mvn", "-Dmdep.outputFile={0}".format(cpfile), "-Dmdep.includeScope=runtime", "dependency:build-classpath"])
  return 0

def make_exec(path, cmd):
  if cmd not in cmds:
    raise ValueError('Command must be one of {0}'.format(cmds))
  exec_path = Path(path) / 'n5-{0}'.format(cmd.lower())
  exec_path.parent.mkdir(parents=True, exist_ok=True)
  # half of system memory, in GB
  mem = virtual_memory().total // 2 ** 30 // 2
  
  opsys = platform.system()
  if opsys in ('Darwin', 'Linux'):
    shebang = "#!/bin/bash \n"
    argcapture = '"$@"'
  elif opsys == 'Windows':
    shebang = ''
    argcapture = '%*'
  else:
    raise OSError('Operating system {0} not supported'.format(opsys))
  
  jar = "$HOME/.m2/repository/org/janelia/saalfeldlab/n5-utils/{0}/n5-utils-{0}.jar".format(VERSION)
  # read the classpath file generated by mvn
  cp = Path(cpfile).read_text()        
  script = 'java -Xmx{0}g -XX:+UseConcMarkSweepGC -cp {1}:{2} org.janelia.saalfeldlab.{3} {4}'.format(mem, jar, cp, cmd, argcapture)
  exec_path.write_text(shebang + script)
  # set executable flags
  exec_path.chmod(exec_path.stat().st_mode | stat.S_IEXEC | stat.S_IXGRP | stat.S_IXOTH)
  return 0

def main(install_dir):  
  mvn()
  print("Installing into {0}".format(install_dir))
  [make_exec(install_dir, cmd) for cmd in cmds]
  os.remove(cpfile)
  
  return 0

if __name__ == '__main__':
  if len(sys.argv) == 1:
    path = ''
  else:
    path = sys.argv[1]
  main(Path(path).resolve())